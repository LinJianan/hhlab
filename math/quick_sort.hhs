// when we use this function, we have ensured that input is an array
function private_quick_sort(input) {

    // if the length is less than 10, then use insert sort
    // if the length is larger than 50, then there is risk for breaking the upper bound of recursion
    if (input.length < 10 || input.length > 50) {
        return private_insert_sort(input);
    }

    let borderline = (input[0] + input[input.length - 1]) / 2;
    let L = [], R = [];

    // divide the elements into left and right
    for (let i = 0; i < input.length; i++) {
        if (input[i] <= borderline) {
            L.push(input[i]);
        }
        else {
            R.push(input[i]);
        }
    }

    // recursion
    L = private_quick_sort(L);
    R = private_quick_sort(R);

    let result = L.concat(R);
    return result;
}

// when we use this function, we have ensured that input is an array
function private_insert_sort(input) {

    // if the length is 0 or 1
    if (input.length <= 1) {
        return input;
    }

    // insert part
    for (let i = 1; i < input.length; i++) {

        // find the position to insert
        let j = 0;
        while (input[j] <= input[i] && j < i) {
            j++;
        }

        // move the element
        let temp = input[i];
        for (let k = i; k > j; k--) {
            input[k] = input[k - 1];
        }
        input[j] = temp;
    }

    return input;
}


test_array = [35, 49, 1, 66, 14, 4, 37, 61, 9, 43, 59, 80, 17, 38, 6, 24, 24, 4, 97, 40, 75, 29, 46, 93, 19, 6, 13, 15, 22, 33, 30, 69, 48, 5, 86, 27, 17, 96, 50, 25, 20, 81, 56, 78, 89, 29, 35, 56, 84, 13, 15, 17, 95, 4, 14, 28, 55, 20, 48, 94, 88, 44, 56, 16, 28, 2, 40, 84, 30, 40, 86, 17, 40, 90, 56, 93, 24, 4, 28, 41, 60, 49, 71, 40, 74, 20, 91, 13, 98, 92, 38, 74, 34, 28, 35, 44, 65, 35, 81, 49];

result = private_quick_sort(test_array);
for (let i = 0; i < test_array.length; i++) {
    print(result[i]);
}
