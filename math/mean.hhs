/**
 * @author Jianan Lin (林家南)
 * @param input - the list, matrix, tensor or structure that you want to get the mean(average) of
 * @returns - a number representing the mean of all the elements of a list, matrix, tensor or other structure
 * 
 */


*import math: is_number
*import math: flatten
*import math: ndim
*import math: deep_copy


function mean(input) {

    // if there are no arguments, there is an error
    if (arguments.length === 0) {
        throw new Error('No argument given');
    }

    // if the first argument is a number, then we should get the mean of a list of numbers
    if (is_number(arguments[0])) {

        // determine whether there is invalid element
        for (let i = 0; i < arguments.length; i++) {
            if (!is_number(arguments[i])) {
                throw new Error('First argument suggests a list, but there is a non number element in arguments.');
            }
        }

        // sum_array is the sum, n is the number, result is sum / n
        let sum_array = 0, n = 0;
        for (let i = 0; i < arguments.length; i++) {
            sum_array += arguments[i];
            n++;
        }

        let result = sum_array / n;
        return result;
    }

    //now we're dealing with non-numbers and matrix-like structures:
    //declare raw_in, set it to a input clone if its a Mat otherwise input itself
    let in_type = (input instanceof Mat);
    let raw_in = (in_type) ? input.clone() : deep_copy(input);

    // if the input is a matrix-like structure, then should we add another argument to decide : 1. get the mean of the whole matrix; 2. get the mean of each row / column of the matrix by axis?
    if (arguments.length === 1 && (Array.isArray(arguments[0]) || arguments[0] instanceof Mat)) {

        // in this way, raw_in is always an array
        if (arguments[0] instanceof Mat) {
            raw_in = raw_in.val;
        }

        // declare dimension of raw_in
        let dims = ndim(raw_in);

        // in the case dimension = 1, e.g. [1, 2, 3, 4]
        if (dims == 1) {
            let sum_array = 0, n = 0;
            for (let i = 0; i < raw_in.length; i++) {
                sum_array += raw_in[i];
                n++;
            }
            let result = sum_array / n;
            return result;
        }

        // in the case dimension = 2, e.g. [[1, 2], [3, 4]]
        else if (dims == 2) {
            let sum_array = 0, n = 0;
            for (let i = 0; i < raw_in.length; i++) {
                for (let j = 0; j < raw_in[i].length; j++) {
                    sum_array += raw_in[i][j];
                    n++;
                }
            }
            let result = sum_array / n;
            return result;
        }

        // in the case dimension > 2, e.g. [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
        // or it is a tensor
        else if (input instanceof Tensor || (dims > 2 && is_number(dims))) {
            raw_in = flatten(raw_in);
            let sum_array = 0, n = 0;
            for (let i = 0; i < raw_in.length; i++) {
                sum_array += raw_in[i];
                n++;
            }
            let result = sum_array / n;
            return result;
        }

        else {
            throw new Error('Invalid dimension of the first argument');
        }
    }

    else {
        throw new Error('Invalid argument');
    }
}
