/**
 * @author Jianan Lin (林家南)
 * @param input - the list, matrix, tensor or structure that you want to get the median of
 * @returns - a number representing the median of all the elements of a list, matrix, tensor or other structure
 * 
 */


*import math: is_number
*import math: flatten
*import math: ndim
*import math: deep_copy


function median(input) {

    // if there are no arguments, there is an error
    if (arguments.length === 0) {
        throw new Error('No argument given');
    }

    // if the first argument is a number, then we should get the mean of a list of numbers
    if (is_number(arguments[0])) {

        // determine whether there is invalid element
        let length = arguments.length;
        for (let i = 0; i < length; i++) {
            if (!is_number(arguments[i])) {
                throw new Error('First argument suggests a list, but there is a non number element in arguments.');
            }
        }

        // sort the array and find the median
        array_sort = [];
        for (let i = 0; i < length; i++) {
            array_sort.push(arguments[i]);
        }
        array_sort.sort();

        // depend on odd or even length
        if (length % 2 == 0) {
            let v1 = array_sort[length / 2], v2 = array_sort[length / 2 - 1];
            let result = (v1 + v2) / 2;
            return result;
        }

        else {
            let result = array_sort[(length - 1) / 2];
            return result;
        }

    }

    //now we're dealing with non-numbers and matrix-like structures:
    //declare raw_in, set it to a input clone if its a Mat otherwise input itself
    let in_type = (input instanceof Mat);
    let raw_in = (in_type) ? input.clone() : deep_copy(input);

    // if the input is a matrix-like structure, then should we add another argument to decide : 1. get the mean of the whole matrix; 2. get the mean of each row / column of the matrix by axis?
    if (arguments.length === 1 && (Array.isArray(arguments[0]) || arguments[0] instanceof Mat || arguments[0] instanceof Tensor)) {

        // in this way, raw_in is always an array
        if (arguments[0] instanceof Mat) {
            raw_in = raw_in.val;
        }

        // declare dimension of raw_in
        let dims = ndim(raw_in);

        // in the case dimension = 1, e.g. [1, 2, 3, 4]
        if (dims == 1) {
            raw_in.sort();
            let length = raw_in.length;
            if (length % 2 == 0) {
                let v1 = raw_in[length / 2], v2 = raw_in[length / 2 - 1];
                let result = (v1 + v2) / 2;
                return result;
            }
            else {
                let result = raw_in[(length - 1) / 2];
                return result;
            }
        }

        // in the case dimension = 2, e.g. [[1, 2], [3, 4]]
        else if (dims == 2) {
            let array_sort = [];
            for (let i = 0; i < raw_in.length; i++) {
                array_sort = array_sort.concat(raw_in[i]);
            }
            array_sort.sort();
            let length = array_sort.length;
            if (length % 2 == 0) {
                let v1 = array_sort[length / 2], v2 = array_sort[length / 2 - 1];
                let result = (v1 + v2) / 2;
                return result;
            }
            else {
                let result = array_sort[(length - 1) / 2];
                return result;
            }
        }

        // in the case dimension > 2, e.g. [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
        // or it is a tensor
        else if (raw_in instanceof Tensor || (dims > 2 && is_number(dims))) {
            raw_in = flatten(raw_in);
            let length = raw_in.length;
            if (length % 2 == 0) {
                let v1 = raw_in[length / 2], v2 = raw_in[length / 2 - 1];
                let result = (v1 + v2) / 2;
                return result;
            }
            else {
                let result = raw_in[(length - 1) / 2];
                return result;
            }
        }

        else {
            throw new Error('Invalid dimension of the first argument');
        }
    }

    else {
        throw new Error('Invalid argument');
    }
}
